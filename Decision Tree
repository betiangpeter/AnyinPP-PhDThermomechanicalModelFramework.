class Question:
    """A Question is used to partition a dataset.

    This class just records a 'column number' (e.g., 0 for Viscosity) and a
    'column value' (e.g., Visco325). The 'match' method is used to compare
    the feature value in an example to the feature value stored in the
    question. See the demo below.
    """

    def __init__(self, column, value):
        self.column = column
        self.value = value

    def match(self, example):
        # Compare the feature value in an example to the
        # feature value in the question
        val = example[self.column]
        if is_numeric(val):
            return val >= self.value
        else:
            return val == self.value

    def __repr__(self) -> str:
        # This is just a helper method to print
        # the question in a readable format.
        condition = '=='
        if is_numeric(self.value):
            condition = ">="
        return "Is %s %s %s?" % (
            header[self.column], condition, str(self.value)
        )

def partition(rows, question):
    """Partition a dataset.

    For each row in the dataset, check if it matches the question. If
    so, add it to 'true rows', otherwise; add it to 'false rows'.
    """

    true_rows, false_rows = [], []
    for row in rows:
        if question.match(row):
            true_rows.append(row)
        else:
            false_rows.append(row)
    return true_rows, false_rows

true_rows, false_rows = partition(training_data, Question(2, 'Bitu_20/30'))
# This will contain all the 'Red' rows.
true_rows
ret1 = true_rows
P = np.array(ret1)[:,1]
statistics.median(P)
